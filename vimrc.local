set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" Additional vim syntax highlighting for C++ (including C++ 11/14/17)
Plug 'octol/vim-cpp-enhanced-highlight'
" The following are examples of different formats supported.
" Keep Plug commands between vundle#begin/end.
" Plug on GitHub repo
Plug 'tpope/vim-fugitive'
" Plug from http://vim-scripts.org/vim/scripts.html
Plug 'vim-scripts/L9'
" Fast file/buffer/function navigation
Plug 'Yggdroot/LeaderF'
" git repos on your local machine (i.e. when working on your own Plug)
"Plug 'file:///home/gmarik/path/to/Plug'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}
" View all functions in current module
Plug 'majutsushi/tagbar'
" View gcov markers
Plug 'clarkli86/vim-gcov-marker'
" gruvbox
Plug 'morhetz/gruvbox'
" gutentags
Plug 'ludovicchabant/vim-gutentags'
" ALE
" Plug 'dense-analysis/ale'
" airline
Plug 'vim-airline/vim-airline'
" Ack inside VIM
Plug 'mileszs/ack.vim'
" Nerdtree
Plug 'preservim/nerdtree'
" Echodoc for augument display
Plug 'Shougo/echodoc'
" Switch between source and header
Plug 'vim-scripts/a.vim'
" Async run
Plug 'skywind3000/asyncrun.vim'
" Auto Completion Plugins
" YouCompleteMe
" Plug 'ycm-core/YouCompleteMe'
" deoplete
" if has('nvim')
"  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"  Plug 'zchee/deoplete-clang'
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif
Plug 'prabirshrestha/async.vim'
" LspReferences seems to replace cscope's <c-space> very well and is more
" smart
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Plug 'Shougo/deoplete.nvim'
" Plug 'lighttiger2505/deoplete-vim-lsp'

" All of your Plugins must be added before the following line
call plug#end()            " required
filetype plugin indent on    " required

set ai et sts=2 sw=2 ts=2 nocompatible bs=2 bg=dark hlsearch incsearch showbreak=---> ruler

set ignorecase

syntax on
colorscheme gruvbox
set wildmenu

" fixes glitch? in colors when using vim with tmux
set background=dark
set t_Co=256

" Remove trailing spaces on saving
autocmd BufWritePre * :%s/\s\+$//e

" Open file at the last edited location
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Highlight trailing whitespace when not in insert mode
au InsertEnter * match Todo /\s\+\%#\@<!$/
au InsertLeave * match Todo /\s\+$/

" Highlight all trailing whitespace all the time
match Todo /\s\+$/

" Trailing whitespace and tabs will be listed
set list listchars=tab:»·,trail:·

" Tabs will be listed
set list listchars=tab:»·

" Enable folding but open files unfolded
set foldmethod=syntax
set foldlevel=99

augroup makefile
    au!
    au FileType make setlocal noet sts=0 ts=8 sw=8
augroup END

set printoptions=paper:letter

fun! <SID>StripTrailingWhitespaces()
    " Save the cursor location
    let l = line(".")
    let c = col(".")
    " Preserve search position by using call
    call %s/\s\+$//e

    " Restore the cursor location
    call cursor(l, c)
endfun

" Swap text on both sides of equals
:command! -range=% SwapEquals <line1>,<line2>s/\([^=]*\)\s*=\s*\([^;]*\)/\2 = \1/g

" Enable doxygen syntax
:let g:load_doxygen_syntax=1

" Enable hpp/cpp skeleton
au BufNewFile *.hpp 0r ~/.vim/hpp.skel | let IndentStyle = "cpp"
au BufNewFile *.cpp 0r ~/.vim/cpp.skel | let IndentStyle = "cpp"

" Press // to search for the selected text in visual mode
" yank selected;<C-R> to insert '"' register which contains the last yanked
" content;<CR> to start search
vnoremap // y/<C-R>"<CR>

" Comment current line by //
nnoremap // I//<esc>

" Press F8 for tagbar
nmap <F8> :TagbarToggle<CR>

" ctags
set tags=./.tags;.tags
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" No debug trace
let g:gutentags_trace = 0

" ALE
let g:ale_linters_explicit = 1
let g:ale_linters = {'c': ['gcc'], 'lua': ['luac'], 'cpp': ['gcc'], 'python': ['flake8', 'pylint']}
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
let g:ale_sign_error = "\ue009\ue009"
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta

" YouCompleteMe
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'error'
let g:ycm_min_num_identifier_candidate_chars = 3
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
" set completeopt=menu,menuone

noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  {
            \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
            \ 'cs,lua,javascript': ['re!\w{2}'],
            \ }

" deoplete
let g:deoplete#enable_at_startup = 1

" deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-3.8/lib/clang'

" Nerdtree
map <C-n> :NERDTreeToggle<CR>

" echodoc
set noshowmode
let g:echodoc_enable_at_startup = 1

" LeadF
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<cr>
noremap <m-p> :LeaderfFunction!<cr>
noremap <m-n> :LeaderfBuffer<cr>
noremap <m-m> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}

" Async Run
:noremap <F7> :AsyncRun -raw make -f stack/Makefile mk5<cr>
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
" 设置 F8 打开/关闭 Quickfix 窗口
nnoremap <F8> :call asyncrun#quickfix_toggle(6)<cr>

" Alt to Meta
function! Terminal_MetaMode(mode)
    set ttimeout
    if $TMUX != ''
        set ttimeoutlen=30
    elseif &ttimeoutlen > 80 || &ttimeoutlen <= 0
        set ttimeoutlen=80
    endif
    if has('nvim') || has('gui_running')
        return
    endif
    function! s:metacode(mode, key)
        if a:mode == 0
            exec "set <M-".a:key.">=\e".a:key
        else
            exec "set <M-".a:key.">=\e]{0}".a:key."~"
        endif
    endfunc
    for i in range(10)
        call s:metacode(a:mode, nr2char(char2nr('0') + i))
    endfor
    for i in range(26)
        call s:metacode(a:mode, nr2char(char2nr('a') + i))
        call s:metacode(a:mode, nr2char(char2nr('A') + i))
    endfor
    if a:mode != 0
        for c in [',', '.', '/', ';', '[', ']', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    else
        for c in [',', '.', '/', ';', '{', '}']
            call s:metacode(a:mode, c)
        endfor
        for c in ['?', ':', '-', '_']
            call s:metacode(a:mode, c)
        endfor
    endif
endfunc

call Terminal_MetaMode(0)
